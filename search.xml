<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java终生学习，继承和多态——06</title>
      <link href="/2017/11/18/Java06/"/>
      <url>/2017/11/18/Java06/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中的继承和多态"><a href="#Java中的继承和多态" class="headerlink" title="Java中的继承和多态"></a>Java中的继承和多态</h1><h2 id="一：继承extends"><a href="#一：继承extends" class="headerlink" title="一：继承extends"></a>一：继承extends</h2><p>什么是继承，有什么用？<br>        继承的作用：<br>            基本作用：子类继承父类，代码可以得到复用。（ 基本作用。）<br>            主要作用：因为有了继承关系，才有了方法覆盖和多态机制。</p><h3 id="1-继承的相关特性"><a href="#1-继承的相关特性" class="headerlink" title="1.继承的相关特性"></a>1.继承的相关特性</h3><pre><code>① B类继承A类，则称A类为超类(superclass)、父类、基类，    B类则称为子类(subclass)、派生类、扩展类。        class A&#123;&#125;        class B extends A&#123;&#125;        我们平时聊天说的比较多的是：父类和子类。        superclass 父类        subclass 子类    ② java 中的继承只支持单继承，不支持多继承，C++中支持多继承，    这也是 java 体现简单性的一点，换句话说，java 中不允许这样写代码：        class B extends A,C&#123; &#125; 这是错误的。    ③ 虽然 java 中不支持多继承，但有的时候会产生间接继承的效果，    例如：class C extends B，class B extends A，也就是说，C 直接继承 B，    其实 C 还间接继承 A。    ④ java 中规定，子类继承父类，除构造方法不能继承之外，剩下都可以继承。    但是私有的属性无法在子类中直接访问。(父类中private修饰的不能在子类中    直接访问。可以通过间接的手段来访问。)    ⑤ java 中的类没有显示的继承任何类，则默认继承 Object类，Object类是     java 语言提供的根类（老祖宗类），也就是说，一个对象与生俱来就有     Object类型中所有的特征。    ⑥ 继承也存在一些缺点，例如：CreditAccount 类继承 Account 类会导致它    们之间的耦合度非常高，Account 类发生改变之后会马上影响到 CreditAccount 类</code></pre><h2 id="二：方法覆盖"><a href="#二：方法覆盖" class="headerlink" title="二：方法覆盖"></a>二：方法覆盖</h2><h3 id="2-1、什么时候考虑使用方法覆盖？"><a href="#2-1、什么时候考虑使用方法覆盖？" class="headerlink" title="2.1、什么时候考虑使用方法覆盖？"></a>2.1、什么时候考虑使用方法覆盖？</h3><pre><code>父类中的方法无法满足子类的业务需求，子类有必要对继承过来的方法进行覆盖。</code></pre><h3 id="2-2、什么条件满足的时候构成方法覆盖？"><a href="#2-2、什么条件满足的时候构成方法覆盖？" class="headerlink" title="2.2、什么条件满足的时候构成方法覆盖？"></a>2.2、什么条件满足的时候构成方法覆盖？</h3><pre><code>第一：有继承关系的两个类第二：具有相同方法名、返回值类型、形式参数列表第三：访问权限不能更低。第四：抛出异常不能更多。</code></pre><h3 id="2-3、关于Object类中toString-方法的覆盖？"><a href="#2-3、关于Object类中toString-方法的覆盖？" class="headerlink" title="2.3、关于Object类中toString()方法的覆盖？"></a>2.3、关于Object类中toString()方法的覆盖？</h3><pre><code>toString()方法存在的作用就是：将java对象转换成字符串形式。大多数的java类toString()方法都是需要覆盖的。因为Object类中提供的toString()方法输出的是一个java对象的内存地址。至于toString()方法具体怎么进行覆盖？格式可以自己定义，或者听需求的。（听项目要求的。）</code></pre><h3 id="2-4、方法重载和方法覆盖有什么区别？"><a href="#2-4、方法重载和方法覆盖有什么区别？" class="headerlink" title="2.4、方法重载和方法覆盖有什么区别？"></a>2.4、方法重载和方法覆盖有什么区别？</h3><pre><code>方法重载发生在同一个类当中。方法覆盖是发生在具有继承关系的父子类之间。方法重载是一个类中，方法名相同，参数列表不同。方法覆盖是具有继承关系的父子类，并且重写之后的方法必须和之前的方法一致：    方法名一致、参数列表一致、返回值类型一致。</code></pre><h2 id="三：多态"><a href="#三：多态" class="headerlink" title="三：多态"></a>三：多态</h2><pre><code>多种形态，多种状态，编译和运行有两个不同的状态。    编译期叫做静态绑定。    运行期叫做动态绑定多态的典型代码：父类型的引用指向子类型的对象。多态在开发中的作用是：    降低程序的耦合度，提高程序的扩展力。多态存在的三个必要条件    继承    重写    父类引用指向子类对象    Parent p = new Child();多态的重点以及结论    无论向上转型还是向下转型，都要有继承关系。    Animal a = new Cat();    a.move(); 编译阶段和运行阶段绑定的move方法不一样（向上转型）    if(a instanceof Cat)&#123;             Cat c = (Cat)a;             &#125;</code></pre><h2 id="四：super关键字"><a href="#四：super关键字" class="headerlink" title="四：super关键字"></a>四：super关键字</h2><pre><code>super能出现在实例方法和构造方法中。super的语法是：“super.”、“super()”super不能使用在静态方法中。super. 大部分情况下是可以省略的。super.什么时候不能省略呢？    父类和子类中有同名属性，或者说有同样的方法，    想在子类中访问父类的，super. 不能省略。super() 只能出现在构造方法第一行，通过当前的构造方法去调用“父类”中的构造方法，目的是：创建子类对象的时候，先初始化父类型特征。super的使用：    super.属性名                【访问父类的属性】    super.方法名(实参)        【访问父类的方法】    super(实参)                    【调用父类的构造方法】</code></pre>]]></content>
      
      
      <categories>
          
          <category> Javase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java终生学习，面向对象——05</title>
      <link href="/2017/10/28/Java05/"/>
      <url>/2017/10/28/Java05/</url>
      
        <content type="html"><![CDATA[<h1 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h1><h2 id="一：面向对象包括三大特征（四大）"><a href="#一：面向对象包括三大特征（四大）" class="headerlink" title="一：面向对象包括三大特征（四大）"></a>一：面向对象包括三大特征（四大）</h2><pre><code>抽象封装继承多态任何一个面向对象的编程语言都包括这三个特征例如：    python也有封装 继承 多态。    java  也有封装 继承 多态。java只是面向对象编程语言中的一种。    除了java之外，还有其它很多很多的编程语言也是面向对象的。</code></pre><h2 id="二：类和对象的概念"><a href="#二：类和对象的概念" class="headerlink" title="二：类和对象的概念"></a>二：类和对象的概念</h2><pre><code>  类 -- 【实例化】--&gt; 对象(实例)对象 --【抽象】--&gt; 类类 = 属性 + 方法</code></pre><h2 id="三：类的定义"><a href="#三：类的定义" class="headerlink" title="三：类的定义"></a>三：类的定义</h2><pre><code>[修饰符列表] class 类名 &#123;        //类体 = 属性 + 方法        // 属性在代码上以“变量”的形式存在（描述状态）        // 方法描述动作/行为    &#125;    ps:修饰符列表可以省略。</code></pre><h2 id="三：对象的定义"><a href="#三：对象的定义" class="headerlink" title="三：对象的定义"></a>三：对象的定义</h2><pre><code>对象又被称为实例。实例变量实际上就是：对象级别的变量。</code></pre><h2 id="四：对象和引用的区别"><a href="#四：对象和引用的区别" class="headerlink" title="四：对象和引用的区别"></a>四：对象和引用的区别</h2><pre><code>对象：通过new出来的，在堆内存中存储。引用：但凡是变量，并且该变量中保存了内存地址指向了堆内存当中的对象。</code></pre><h2 id="五：面向对象的首要特征：封装"><a href="#五：面向对象的首要特征：封装" class="headerlink" title="五：面向对象的首要特征：封装"></a>五：面向对象的首要特征：封装</h2><pre><code>封装的作用：    第一个作用：保证内部结构的安全。    第二个作用：屏蔽复杂，暴露简单。怎么进行封装，代码怎么实现？    第一步：属性私有化（使用private关键字进行修饰。）    第二步：1个属性对外提供两个set和get方法。外部程序只能通过set方法修改，只能通过get方法读取    (set和get方法都是实例方法，不能带static。    不带static的方法称为实例方法，实例方法的调用必须先new对象。)Setpublic void set+属性名首字母大写(1个参数)&#123;                xxx = 1个参数;            &#125;getpublic 返回值类型 get+属性名首字母大写(无参)&#123;                return xxx;            &#125;</code></pre><h2 id="六：static关键字"><a href="#六：static关键字" class="headerlink" title="六：static关键字"></a>六：static关键字</h2><pre><code>static修饰的统一都是静态的，都是类相关的，不需要new对象。直接采用“类名.”访问。当一个属性是类级别的属性，所有对象的这个属性的值是一样的，建议定义为静态变量。</code></pre><h2 id="七：this关键字"><a href="#七：this关键字" class="headerlink" title="七：this关键字"></a>七：this关键字</h2><pre><code>1.1、this是一个关键字，是一个引用，保存内存地址指向自身。1.2、this可以使用在实例方法中，也可以使用在构造方法中。1.3、this出现在实例方法中其实代表的是当前对象。1.4、this不能使用在静态方法中。1.5、this. 大部分情况下可以省略，但是用来区分局部变量和实例变量的时候不能省略。1.6、this() 这种语法只能出现在构造方法第一行，表示当前构造方法调用本类其他的构造方法，目的是代码复用。</code></pre>]]></content>
      
      
      <categories>
          
          <category> Javase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java终生学习，关于方法——04</title>
      <link href="/2017/10/28/Java04/"/>
      <url>/2017/10/28/Java04/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中的方法"><a href="#Java中的方法" class="headerlink" title="Java中的方法"></a>Java中的方法</h1><h2 id="一：方法重载overload"><a href="#一：方法重载overload" class="headerlink" title="一：方法重载overload"></a>一：方法重载overload</h2><pre><code>1.1、什么情况下我们考虑使用方法重载机制？    当功能相似的时候，建议将方法名定义为一致的，    这样代码美观，又方便编程。    注意：如果功能不相似，坚决要让方法名不一致。1.2、代码满足什么条件的时候构成了方法重载？    条件1：在同一个类当中    条件2：方法名相同    条件3：形式参数列表不同（类型、个数、顺序）    注意：        方法重载和返回值类型无关，和修饰符列表无关。1.3、方法重载的优点？    代码美观    方便代码的编写</code></pre><h2 id="二：方法递归"><a href="#二：方法递归" class="headerlink" title="二：方法递归"></a>二：方法递归</h2><pre><code>2.1、需要理解什么是方法递归？    方法自身调用自身。2.2、使用递归的时候，必须添加结束条件，没有结束条件，会发生栈内存溢出错误。    StackOverflowError    原因：一直压栈，没有弹栈，栈内存不够用。2.3、能够使用循环代替递归的尽量使用循环，循环的执行耗费内存少一些，递归耗费内存相对多一些，另外递归使用不当很容易内存溢出，JVM停止工作。2.5、当递归有结束条件，并且结束条件合法的时候，就一定不会内存溢出吗？    也不一定。可能递归的太深了。2.6、一些递归方面的经验    在实际的开发中遇到递归导致的栈内存溢出错误是怎么办？        第一步：先检查结束条件是否正确。        第二步：如果正确，可以调整JVM的栈内存大小。(java -X)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Javase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java终生学习，关于方法——03</title>
      <link href="/2017/10/17/Java03/"/>
      <url>/2017/10/17/Java03/</url>
      
        <content type="html"><![CDATA[<h1 id="Java中的方法"><a href="#Java中的方法" class="headerlink" title="Java中的方法"></a>Java中的方法</h1><h2 id="1、方法是什么？"><a href="#1、方法是什么？" class="headerlink" title="1、方法是什么？"></a>1、方法是什么？</h2><pre><code>方法是一段可以完成某个特定功能的并且可以被重复利用的代码片段。方法的出现，让代码具有了很强的复用性。</code></pre><h2 id="2、方法最难实现的是："><a href="#2、方法最难实现的是：" class="headerlink" title="2、方法最难实现的是："></a>2、方法最难实现的是：</h2><pre><code>根据业务怎么进行方法的抽取。方法的返回值类型定义为什么？方法的名字叫什么？方法的形式参数列表定义为什么？....一个方法就是一个独立的功能。</code></pre><h2 id="3、方法的定义"><a href="#3、方法的定义" class="headerlink" title="3、方法的定义"></a>3、方法的定义</h2><pre><code>[修饰符列表] 返回值类型 方法名(形式参数列表)&#123;    方法体; &#125;</code></pre><h2 id="4、方法的每一个细节学习"><a href="#4、方法的每一个细节学习" class="headerlink" title="4、方法的每一个细节学习"></a>4、方法的每一个细节学习</h2><pre><code> 4.1、修饰符列表：可选项，目前先写成：public static  4.2、怎么理解返回值？返回值是一个方法执行结束之后的结果。 4.3、返回值类型都可以指定哪些类型？4.4、返回值和“return语句”的关系。4.5、方法名只要是合法的标识符就行，首字母小写，后面每个单词首字母大写。见名知意。4.6、形式参数列表4.7、方法体：方法体当中的代码遵循自上而下的顺序依次逐行执行。</code></pre><h2 id="5、JVM的内存结构中三块比较重要的内存空间。"><a href="#5、JVM的内存结构中三块比较重要的内存空间。" class="headerlink" title="5、JVM的内存结构中三块比较重要的内存空间。"></a>5、JVM的内存结构中三块比较重要的内存空间。</h2><pre><code>方法区：    保存所有的class文件和static变量与方法    类加载器首先将代码加载到这里。堆内存：    存储的是一切new出来的对象。栈内存：    存放基本类型的变量和对象的引用变量（局部变量）。</code></pre><h2 id="6、关于数据结构中的栈数据结构"><a href="#6、关于数据结构中的栈数据结构" class="headerlink" title="6、关于数据结构中的栈数据结构"></a>6、关于数据结构中的栈数据结构</h2><pre><code>原则：    后进先出    先进后出栈数据结构相关的术语：    栈帧：永远指向栈顶部的元素（栈顶元素具有活跃权。）    栈顶元素    栈底元素    压栈，入栈，进栈，push    弹栈，出栈，pop</code></pre><h2 id="7、分析程序运行过程中的内存变化"><a href="#7、分析程序运行过程中的内存变化" class="headerlink" title="7、分析程序运行过程中的内存变化"></a>7、分析程序运行过程中的内存变化</h2><pre><code>方法只定义不调用是不会执行的。方法调用时：压栈 （在栈中给该方法分配空间）方法执行结束时：弹栈（将该方法占用的空间释放，局部变量的内存也释放。）</code></pre>]]></content>
      
      
      <categories>
          
          <category> Javase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java终生学习，戒骄戒躁——02</title>
      <link href="/2017/09/30/Java02/"/>
      <url>/2017/09/30/Java02/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-01"><a href="#Java-01" class="headerlink" title="Java 01"></a>Java 01</h1><h2 id="一：控制语句"><a href="#一：控制语句" class="headerlink" title="一：控制语句"></a>一：控制语句</h2><h3 id="2-1、控制语句的出现"><a href="#2-1、控制语句的出现" class="headerlink" title="2.1、控制语句的出现"></a>2.1、控制语句的出现</h3><p>可以让我们的程序具有逻辑性/条理性，可以使用控制语句来实现一个“业务”了。</p><h3 id="2-2、控制语句包括几类？"><a href="#2-2、控制语句包括几类？" class="headerlink" title="2.2、控制语句包括几类？"></a>2.2、控制语句包括几类？</h3><pre><code>    3类：        选择语句        循环语句        转向语句</code></pre><h3 id="2-3、选择语句也可以叫做分支语句"><a href="#2-3、选择语句也可以叫做分支语句" class="headerlink" title="2.3、选择语句也可以叫做分支语句"></a>2.3、选择语句也可以叫做分支语句</h3><pre><code>    if语句    switch语句</code></pre><h3 id="2-4、循环语句：主要循环反复的去执行某段特定的代码块"><a href="#2-4、循环语句：主要循环反复的去执行某段特定的代码块" class="headerlink" title="2.4、循环语句：主要循环反复的去执行某段特定的代码块"></a>2.4、循环语句：主要循环反复的去执行某段特定的代码块</h3><pre><code>    for循环    while循环    do..while..循环</code></pre><h3 id="2-5、转向语句"><a href="#2-5、转向语句" class="headerlink" title="2.5、转向语句"></a>2.5、转向语句</h3><pre><code>    break    continue    return（这个目前先不需要学习，后面讲方法的时候会使用。）</code></pre><h2 id="二：选择语句-分支语句"><a href="#二：选择语句-分支语句" class="headerlink" title="二：选择语句/分支语句"></a>二：选择语句/分支语句</h2><pre><code>if</code></pre><h2 id="三：选择语句"><a href="#三：选择语句" class="headerlink" title="三：选择语句"></a>三：选择语句</h2><pre><code>switch</code></pre><h2 id="四：循环语句"><a href="#四：循环语句" class="headerlink" title="四：循环语句"></a>四：循环语句</h2><pre><code>    for循环    while循环    do..while循环</code></pre><h2 id="五：什么是循环语句，为什么要使用这种语句？"><a href="#五：什么是循环语句，为什么要使用这种语句？" class="headerlink" title="五：什么是循环语句，为什么要使用这种语句？"></a>五：什么是循环语句，为什么要使用这种语句？</h2><pre><code>因为在现实世界当中，有很多事情都是需要反复/重复的去做。对应到程序当中，如果有一块代码需要重复执行，此时为了减少代码量，我们使用循环语句。</code></pre><h2 id="六：转向语句"><a href="#六：转向语句" class="headerlink" title="六：转向语句"></a>六：转向语句</h2><pre><code>break;continue;return;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Javase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java初次见面，请多关照——01</title>
      <link href="/2017/09/19/Java01/"/>
      <url>/2017/09/19/Java01/</url>
      
        <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="一：Java开发环境"><a href="#一：Java开发环境" class="headerlink" title="一：Java开发环境"></a>一：Java开发环境</h2><h3 id="1、常用的DOS命令"><a href="#1、常用的DOS命令" class="headerlink" title="1、常用的DOS命令"></a>1、常用的DOS命令</h3><pre><code>1.1、怎么打开DOS命令   窗口win键 + r （组合键）：可以打开“运行”窗口在运行窗口文本框中输入: cmd然后回车1.2、什么是DOS命令呢？在DOS命令窗口中才可以输入并执行DOS命令。在最初的windows计算机中没有图形界面的，只有DOS命令窗口。也就是说通过执行DOS命令窗口可以完全完成文件的新建、编辑、保存、删除等一系列操作。</code></pre><h3 id="2-文本编辑快捷键"><a href="#2-文本编辑快捷键" class="headerlink" title="2.文本编辑快捷键"></a>2.文本编辑快捷键</h3><pre><code>复制  ctrl + c粘贴  ctrl + v剪切  ctrl + x保存  ctrl + s撤销  ctrl + z重做  ctrl + y回到行首：home键回到行尾：end键当光标在行尾，怎么选中一行？    shift + home键当光标在行首，怎么选中一行？    shift + end键回到文件头：ctrl + home回到文件尾：ctrl + end全选：ctrl + a查找：ctrl + f选中一个单词：鼠标双击选中一行：鼠标连续击3次不用鼠标选中一个单词：ctrl + shift + 右箭头/左箭头</code></pre><h2 id="二：数据类型-8种"><a href="#二：数据类型-8种" class="headerlink" title="二：数据类型(8种)"></a>二：数据类型(8种)</h2><h3 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h3><pre><code>Byte(-128-127)   short int(-2^31-2^31-1) longfloatdoublebooleanchar  (1 2 4 8 4 8 1 2)</code></pre><h3 id="2-引用数据类型"><a href="#2-引用数据类型" class="headerlink" title="2.引用数据类型"></a>2.引用数据类型</h3><pre><code>字符串型String属于引用数据类型。String字符串不属于基本数据类型范畴。java中除了基本数据类型之外，剩下的都是引用数据类型。引用数据类型后期面向对象的时候才会接触。</code></pre><h3 id="3-类型转换的时候需要遵循哪些规则？"><a href="#3-类型转换的时候需要遵循哪些规则？" class="headerlink" title="3.类型转换的时候需要遵循哪些规则？"></a>3.类型转换的时候需要遵循哪些规则？</h3><pre><code>第一条：八种基本数据类型中，除 boolean 类型不能转换，剩下七种类型之间都可以进行转换；第二条：如果整数型字面量没有超出 byte,short,char 的取值范围，可以直接将其赋值给byte,short,char 类型的变量；第三条：小容量向大容量转换称为自动类型转换，容量从小到大的排序为：byte &lt; short(char) &lt; int &lt; long &lt; float &lt; double，其中 short和 char 都占用两个字节，但是char 可以表示更大的正整数；第四条：大容量转换成小容量，称为强制类型转换，编写时必须添加“强制类型转换符”，但运行时可能出现精度损失，谨慎使用；第五条：byte,short,char 类型混合运算时，先各自转换成 int 类型再做运算；第六条：多种数据类型混合运算，各自先转换成容量最大的那一种再做运算；</code></pre><h3 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4.运算符"></a>4.运算符</h3><pre><code>算术运算符：    + - * / % ++ --关系运算符：    &gt; &gt;= &lt; &lt;= == != 逻辑运算符：    &amp; | ! &amp;&amp; ||赋值运算符：    = += -= *= /= %=三目运算符：    布尔表达式 ? 表达式1 : 表达式2字符串连接运算符：    +</code></pre>]]></content>
      
      
      <categories>
          
          <category> Javase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2017/09/01/myfirstblog/"/>
      <url>/2017/09/01/myfirstblog/</url>
      
        <content type="html"><![CDATA[<h1 id="生活不易，小查叹气"><a href="#生活不易，小查叹气" class="headerlink" title="生活不易，小查叹气"></a>生活不易，小查叹气</h1><p>这是我第一篇博客，也不知道写个啥，总之加油吧！<br><img src="https://imgsa.baidu.com/forum/w%3D580/sign=d9b8fc34d4b44aed594ebeec831d876a/83069313b07eca803a98c6999f2397dda04483c2.jpg"></p><h2 id="尽管大学不如我所愿，但我会在尘埃落定前奋力一搏。"><a href="#尽管大学不如我所愿，但我会在尘埃落定前奋力一搏。" class="headerlink" title="尽管大学不如我所愿，但我会在尘埃落定前奋力一搏。"></a>尽管大学不如我所愿，但我会在尘埃落定前奋力一搏。</h2><p>加油！</p><h2 id="直播"><a href="#直播" class="headerlink" title="直播"></a>直播</h2><p><a href="https://www.huya.com/20244410">我的直播间</a></p><p>点个关注大伙！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
